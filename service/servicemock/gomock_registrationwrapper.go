// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/etcd-discovery/v7/service (interfaces: RegistrationWrapper)

// Package servicemock is a generated GoMock package.
package servicemock

import (
	service "github.com/Scalingo/etcd-discovery/v7/service"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRegistrationWrapper is a mock of RegistrationWrapper interface
type MockRegistrationWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationWrapperMockRecorder
}

// MockRegistrationWrapperMockRecorder is the mock recorder for MockRegistrationWrapper
type MockRegistrationWrapperMockRecorder struct {
	mock *MockRegistrationWrapper
}

// NewMockRegistrationWrapper creates a new mock instance
func NewMockRegistrationWrapper(ctrl *gomock.Controller) *MockRegistrationWrapper {
	mock := &MockRegistrationWrapper{ctrl: ctrl}
	mock.recorder = &MockRegistrationWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistrationWrapper) EXPECT() *MockRegistrationWrapperMockRecorder {
	return m.recorder
}

// Credentials mocks base method
func (m *MockRegistrationWrapper) Credentials() (service.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Credentials")
	ret0, _ := ret[0].(service.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Credentials indicates an expected call of Credentials
func (mr *MockRegistrationWrapperMockRecorder) Credentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Credentials", reflect.TypeOf((*MockRegistrationWrapper)(nil).Credentials))
}

// Ready mocks base method
func (m *MockRegistrationWrapper) Ready() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ready indicates an expected call of Ready
func (mr *MockRegistrationWrapperMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockRegistrationWrapper)(nil).Ready))
}

// UUID mocks base method
func (m *MockRegistrationWrapper) UUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// UUID indicates an expected call of UUID
func (mr *MockRegistrationWrapperMockRecorder) UUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*MockRegistrationWrapper)(nil).UUID))
}

// WaitRegistration mocks base method
func (m *MockRegistrationWrapper) WaitRegistration() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitRegistration")
}

// WaitRegistration indicates an expected call of WaitRegistration
func (mr *MockRegistrationWrapperMockRecorder) WaitRegistration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitRegistration", reflect.TypeOf((*MockRegistrationWrapper)(nil).WaitRegistration))
}
